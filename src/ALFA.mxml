<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="com.aa.rpt.apps.owr.view.*"
			   controlBarVisible="true"
			   creationComplete="displaySearchCriteria(true)"
			   skinClass="skin.ApplicationSkin">
	
	<fx:Style source="css\index.css"/>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DateTimeFormatter id="ddmmmyyyyhhmm" dateTimePattern="ddMMMyyyyHHmm"/>
		<s:DateTimeFormatter id="ddmmmyyyyhhmm2" dateTimePattern="ddMMMyyyy HH:mm"/>
		<s:DateTimeFormatter id="ddmmmyyyy" dateTimePattern="ddMMMyyyy"/>
		<s:DateTimeFormatter id="mmddyyyy" dateTimePattern="MMddyyyy"/>
			
		<s:RemoteObject id="connectionAdvisorRemoteObject" concurrency="multiple"
						destination="AvailFinderServiceDestination" showBusyCursor="true">

			<s:method fault="{getBackEndBuildDateFaultHandler(event)}"
					  name="getBackEndBuildDate"
					  result="{getBackEndBuildDateResultHandler(event)}"/>

			<s:method fault="{getConnectionsByMarketFaultHandler(event)}"
					  name="getConnectionsByMarket"
					  result="{getConnectionsByMarketResultHandler(event)}"/>
			
			<s:method fault="{getConnectionsByFlightFaultHandler(event)}"
					  name="getConnectionsByFlight"
					  result="{getConnectionsByFlightResultHandler(event)}"/>
			
			<s:method concurrency="multiple" 
					  fault="{getCabinAvailabiliyFaultHandler(event)}"
					  name="getCabinAvailabiliy" 
					  result="{getCabinAvailabiliyResultHandler(event)}"/>
			
			<s:method concurrency="multiple" 
					  fault="{getCabinAvailabiliyMultiFaultHandler(event)}"
					  name="getCabinAvailabiliyMulti" 
					  result="{getCabinAvailabiliyMultiResultHandler(event)}"/>
		</s:RemoteObject>
		
		<s:HTTPService id="httpUserService" fault="userAccessFaultHandler(event)" result="userAccessResultHandler(event)" resultFormat="e4x"/>

	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.aa.rpt.apps.owr.events.GetConnectionsDataEvent;
			import com.aa.rpt.apps.owr.view.NoAccessScreen;
			import com.aa.rpt.apps.owr.view.SearchScreen;
			import com.aa.rpt.apps.owr.vo.AlfaDataVO;
			import com.aa.rpt.apps.owr.vo.AvailabilityVO;
			import com.aa.rpt.apps.owr.vo.BasicFlightDataVO;
			import com.aa.rpt.apps.owr.vo.FlightAvailabilityVO;
			import com.aa.rpt.apps.owr.vo.FlightLegVO;
			import com.aa.rpt.apps.owr.vo.GetAvailVO;
			import com.aa.rpt.apps.owr.vo.GetConnectionsByMarketInputParmVO;
			import com.aa.rpt.apps.owr.vo.RouteVO;
			import com.aa.rpt.apps.owr.vo.SearchScreenVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.core.FlexGlobals;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.utils.URLUtil;
			
			import spark.components.BorderContainer;
			import spark.components.Label;
			
			[Embed(source="images/rarrow.png")] 
			[Bindable]static private var rArrow:Class;
			[Embed(source="images/200px-Oneworld_logo_svg.png")]
			[Bindable]static private var applogo:Class;
			
			[Bindable] public var alfaData:AlfaDataVO;
			[Bindable] public var routeData:ArrayCollection;
			
			private var searchScreen:SearchScreen;
			private var curParms:SearchScreenVO = null;
			private var mktParms:SearchScreenVO = null;
			private var fltParms:SearchScreenVO = null;
			
			[Bindable] private var isGetAvailCancelled:Boolean = false;
			[Bindable] private var isAvailRunning:Boolean = false;

			private var pendingAvailFlts:ArrayCollection = new ArrayCollection();
			private var jalFlightslist:ArrayCollection = new ArrayCollection();
			
			private var totalPendingAvail:int = 0;
			private var pendingAvailDone:int = 0;
			private var requestSent:int = 0;
			private var totalFlights:Number = 0;
			private var jalFlightCount:Number = 0;
			
			private var listTimeStamp:Date;

			//
			//////////////////////////////////////////////
			public function displaySearchCriteria(checkSiteMinderRole:Boolean = false):void
			{
				if(checkSiteMinderRole)
					{
					httpUserService.url = getServletURL();
					httpUserService.send();
					}

				searchScreen = SearchScreen(PopUpManager.createPopUp(this, SearchScreen, true));
				searchScreen.addEventListener('getConnectionsEvent', requestDataFromServer);
				PopUpManager.centerPopUp(searchScreen);
				searchScreen.populateControls(curParms, mktParms, fltParms);
			}
			
			private function getServletURL():String
			{
				var bm:IBrowserManager = BrowserManager.getInstance();
				bm.init();
				var url:String = bm.url;
				var serverNameWithPort:String = URLUtil.getServerNameWithPort(url);
				//filtering out the http and https part
				var subURL:String = url.substr(url.lastIndexOf(serverNameWithPort));
				subURL = subURL.replace("\//","\////");
				var tokens:Array = subURL.split("/");
				var webContext:String = tokens[1];
				var userProfileServlet:String;

				if(url.search("http") == -1)
					{
					userProfileServlet = "http://localhost:8080/reaccom7-alfa/UserProfileServlet";
					//userProfileServlet = "http://rmread013.tul.aa.com/reaccom7/UserProfileServlet?mode='test'";
					//userProfileServlet = "https://reaaccom-stg1.aa.com/reaccom7/UserProfileServlet";
					//userProfileServlet = "https://reaaccom-cert.aa.com/reaccom7/UserProfileServlet";
					}
				else{
					userProfileServlet = "http://"+serverNameWithPort+"/"+webContext+"/UserProfileServlet";
					}

				return userProfileServlet;
			}

			protected function userAccessResultHandler(event:ResultEvent):void
			{
				var xml:XML = null;
				
				if(event != null && event.result != null)
					xml = event.result as XML;
				
				if(xml == null || xml..userRole == "NOACCESS")
					{
					var na:NoAccessScreen = NoAccessScreen(PopUpManager.createPopUp(this, NoAccessScreen, true));

					if(xml != null)
						na.setRole(xml..userId);
					
					PopUpManager.centerPopUp(na);
					}
				
				if(xml != null)
					tiUser.text = xml..firstName + " " + xml..lastName + " [" + xml..userRole + "]";
			}
			
			protected function userAccessFaultHandler(event:FaultEvent):void
			{
				userAccessResultHandler(null);
				Alert.show(event.fault.toString());
			}
			
			protected function getBackEndBuildDate():void
			{
				connectionAdvisorRemoteObject.getOperation('getBackEndBuildDate').send();
			}

			//
			///////////////////////////////////////////////////////////
			public function requestDataFromServer(data:GetConnectionsDataEvent):void
			{
				if(data.inputParmsVO == null)
					{
					searchScreen.removeEventListener('getConnectionsEvent', requestDataFromServer);
					PopUpManager.removePopUp(searchScreen);
					return;
					}
				
				var reqParms:GetConnectionsByMarketInputParmVO = new GetConnectionsByMarketInputParmVO();

				curParms = data.inputParmsVO;
				
				if(curParms.searchType == 0)
					{
					mktParms = curParms;

					reqParms.depSta = mktParms.depSta;
					reqParms.arvSta = mktParms.arvSta;
					reqParms.minDate = ddmmmyyyyhhmm.format(mktParms.depDateMin);
					reqParms.maxDate = ddmmmyyyyhhmm.format(mktParms.depDateMax);
					reqParms.domesticconnectTime = mktParms.domConxTime;
					reqParms.internationalconnectTime = mktParms.intConxTime;
					reqParms.sistercities = mktParms.useSisterCities;
					reqParms.miles = mktParms.maxMileage;
					reqParms.mileagePercent = mktParms.isMileageInPercent;
					reqParms.legs = String(mktParms.numConx);
					reqParms.avoidStations = mktParms.avoidStations;
					reqParms.airlineCodes = mktParms.validAirlines;
					
					connectionAdvisorRemoteObject.getOperation('getConnectionsByMarket').send(reqParms);
					}
				else{
					fltParms = curParms;

					if(fltParms.fltDepSta.length == 3 && fltParms.fltArvSta.length == 3 )
						{
						reqParms.depSta = fltParms.fltDepSta;
						reqParms.arvSta = fltParms.fltArvSta;
						reqParms.minDate = ddmmmyyyyhhmm.format(fltParms.fltDate);
						reqParms.maxDate = ddmmmyyyyhhmm.format(new Date(fltParms.fltDate.fullYear, fltParms.fltDate.month, fltParms.fltDate.date + 1, fltParms.fltDate.hours, fltParms.fltDate.minutes));
						reqParms.domesticconnectTime = '10';
						reqParms.internationalconnectTime = '10';
						reqParms.miles = null;
						reqParms.legs = '3';
						reqParms.avoidStations = null;
						reqParms.airlineCodes = fltParms.fltAirline;
						reqParms.flightNumber = Number(fltParms.fltNum);

						connectionAdvisorRemoteObject.getOperation('getConnectionsByMarket').send(reqParms);
						}
					else{
						var flightDateString:String = ddmmmyyyy.format(fltParms.fltDate);

						connectionAdvisorRemoteObject.getOperation('getConnectionsByFlight').send(fltParms.fltNum, fltParms.fltAirline, flightDateString);
						}
					}
			}

			private function getConnectionsByMarketResultHandler(resultEvent:ResultEvent):void
			{
				if(resultEvent == null || resultEvent.result == null)
					return;
				
				processRouteDataResponse(resultEvent.result as AlfaDataVO);
			}
			
			private function getConnectionsByFlightResultHandler(resultEvent:ResultEvent):void
			{
				if(resultEvent == null || resultEvent.result == null)
					return;
				
				processRouteDataResponse(resultEvent.result as AlfaDataVO);
			}
			
			private function getBackEndBuildDateResultHandler(resultEvent:ResultEvent):void
			{
				Alert.show(resultEvent.result as String);
			}

			private function getConnectionsByMarketFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
			}
			
			private function getConnectionsByFlightFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
			}
			
			private function getBackEndBuildDateFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show("Cannot Determine Back End Build Date...Back End is Most Likely Out of Date");
			}
			
			//
			///////////////////////////////////////////////////////////
			private function processRouteDataResponse(alfaDataVO:AlfaDataVO):void
			{
				if(alfaDataVO.routeList.length == 0)
					{
					Alert.show((alfaDataVO.status == null ? "No Routes Found For This Market" : alfaDataVO.status));
					return;
					}
				
				searchScreen.removeEventListener('getConnectionsEvent', requestDataFromServer);
				PopUpManager.removePopUp(searchScreen);
				
				listTimeStamp = new Date();
				isGetAvailCancelled = false;
				isAvailRunning = false;
				totalPendingAvail = 0;
				
				alfaData = alfaDataVO;
				
				if(routeData != null)
					routeData.removeAll();
				
				routeData = alfaDataVO.routeList;
				
				for(var i:int = 1; i <= 9; i++)
					{
					var theName:Label = Label(scNames.getChildByName("name" + String(i)));
					var theVal:Label  = Label(scVals.getChildByName("val" + String(i)));
					
					if(curParms.searchType == 0)
						{
						switch(i)
							{
							case 1:
								theName.text = "Market:";
								theVal.text = curParms.depSta + " to " + curParms.arvSta;
								break;
							case 2:
								theName.text = "Sister Cities:";
								theVal.text = (curParms.useSisterCities ? "Yes" : "No");
								break;
							case 3:
								theName.text = "DEP Window Start:";
								theVal.text = ddmmmyyyyhhmm2.format(curParms.depDateMin);
								break;
							case 4:
								theName.text = "DEP Window End:";
								theVal.text = ddmmmyyyyhhmm2.format(curParms.depDateMax);
								break;
							case 5:
								theName.text = "Max Conx Time:";
								theVal.text = "Dom: " + String(curParms.domConxTime) + "; Intl: " + String(curParms.intConxTime);
								break;
							case 6:
								theName.text = "Max Mileage:";
								theVal.text = (curParms.isMileageInPercent ? (String(curParms.maxMileage) + " Multiplier") : String(curParms.maxMileage));
								break;
							case 7:
								theName.text = "Avoid Stations:";
								theVal.text = (curParms.avoidStations.length == 0 ? "None" : curParms.avoidStations);
								break;
							case 8:
								theName.text = "Max Legs:";
								theVal.text = String(curParms.numConx);
								break;
							case 9:
								theName.text = "Airlines:";
								if(curParms.validAirlines.length == 0)
									{
									theVal.text = "All"
									valAirlines.text = "";
									}
								else{
									theVal.text = "";
									valAirlines.text = "   [" + curParms.validAirlines + "]";
									}
								break;
							}
						}
					else{
						switch(i)
							{
							case 1:
								theName.text = "Flight Number:";
								theVal.text = curParms.fltNum;
								break;
							case 2:
								theName.text = "Market:";
								theVal.text = curParms.fltDepSta + "  " + curParms.fltArvSta;
								break;
							case 3:
								theName.text = "Flight Date:";
								theVal.text = ddmmmyyyyhhmm2.format(curParms.fltDate);
								break;
							case 4:
								theName.text = "Airline:";
								theVal.text = curParms.fltAirline;
								valAirlines.text = "";
								break;
							default:
								theName.text = "";
								theVal.text = "";
								break;
							}
						}
					}
				
				fAA.selected = false;
				fBA.selected = false;
				fIB.selected = false;
				fJL.selected = false;
				fAY.selected = false; 
				fUS.selected = false;  
				fnonstop.selected = false;
				fonestop.selected = false;
				ftwostops.selected = false;
				fAvl.selected = false;
				
				getAvailForPendingFlights((curParms.suppressAvail ? 0 : 5), true);
			}

			//
			///////////////////////////////////////////////////////////
			private function getAvailForPendingFlights(numToSend:int, firstTime:Boolean = false):void
			{
				var flightsForAvail:ArrayCollection = null;
				
				if(firstTime)
					{
					flightsForAvail = new ArrayCollection();
					
					for(var i:int = 0; i < alfaData.getAvailList.length; i++)
						flightsForAvail.addItem(GetAvailVO(alfaData.getAvailList[i]).fltData);
					
					pendingAvailFlts.removeAll();
					jalFlightslist.removeAll();
					}
				
				var x:int=0;
				
				if(flightsForAvail != null)
					{	
					var basicFlightVO:BasicFlightDataVO;
					var r:int=0;
					
					for(var y:int=0;y<flightsForAvail.length;y++)
						{
						basicFlightVO = flightsForAvail[y] as BasicFlightDataVO;
						
						if(basicFlightVO.airlineCode=='JL')
							{	
							jalFlightslist.addItemAt(basicFlightVO,r);
							r++;
							}
						else{ 
							pendingAvailFlts.addItemAt(flightsForAvail.getItemAt(y),x);
							x++;
						 	}
						}
					
					jalFlightCount=jalFlightslist.length;
					
					totalPendingAvail= flightsForAvail.length;
					pendingAvailDone = 0;
					
					stillPending.text = String(totalPendingAvail);
					totalFlights= flightsForAvail.length;
					}
				
				if(numToSend > totalFlights)
					numToSend = totalFlights;
				
				while(numToSend > 0)
				{	
					isAvailRunning = true;
					
					if(pendingAvailFlts!=null)
					{
						if(pendingAvailFlts.length>0 && isGetAvailCancelled==false && totalFlights!=0)
						{
							getSingleFlightAvailability(pendingAvailFlts.getItemAt(0) as BasicFlightDataVO);
							pendingAvailFlts.removeItemAt(0);
							
							++requestSent;
							--totalFlights;
							--numToSend;
						}
						
						if(pendingAvailFlts.length==0)
						{
							if(jalFlightslist!=null && isGetAvailCancelled==false && totalFlights!=0)
							{ 

								if(jalFlightslist.length >0)
								{
									getMulitipleFlightAvailability(jalFlightslist);
									requestSent= requestSent+jalFlightslist.length;
									totalFlights= totalFlights-jalFlightslist.length;
									jalFlightslist.removeAll();
									--numToSend;
								}
								
							}
							else
								--numToSend;
						}

					}
					else
					{
						if(jalFlightslist!=null && isGetAvailCancelled==false && totalFlights!=0)
						{ 
							if(jalFlightslist.length >0)
							{
								getMulitipleFlightAvailability(jalFlightslist);
								requestSent= requestSent+jalFlightslist.length;
								totalFlights= totalFlights-jalFlightslist.length;
								jalFlightslist.removeAll();
								--numToSend;
							}
							
						}
						else
							--numToSend;

					}
						
				}
			}

			private function computeDistance(val:Number):String
			{
				var km:int = (val / .621371192);
				
				return("Miles: " + val.toString() + "; Km: " + km.toString());
			}
			
			private function getMulitipleFlightAvailability(flightList:ArrayCollection):void
			{
				if(flightList.length>0)
					connectionAdvisorRemoteObject.getOperation('getCabinAvailabiliyMulti').send(flightList);
			}
			
			private function getSingleFlightAvailability(basicFlightDataVO:BasicFlightDataVO):void
			{
				connectionAdvisorRemoteObject.getOperation('getCabinAvailabiliy').send(basicFlightDataVO);
			}
			
			public var seats:String;
			
			
			public var cabinData:String;
			
			private function assignSeats(_availabilityVO:AvailabilityVO):void
			{
				if(_availabilityVO)
				{
					var availData:String = "";
					var seatAvail:Number = 0;
				    var fClass:String;
					var cClass:String;
					var yClass:String;
					var jClass:String;
					var mClass:String;
					var wClass:String;
					var eClass:String;
					
					
					if(!isNaN(_availabilityVO.classAvailF))
					{
						fClass = (_availabilityVO.classAvailF >= 0) ? _availabilityVO.classAvailF.toString() : "0";
						seatAvail += (_availabilityVO.classAvailF >= 0) ? _availabilityVO.classAvailF : 0;
						availData += "F" + fClass + "  ";
						
					}
					
					if(!isNaN(_availabilityVO.classAvailC))
					{
						cClass = (_availabilityVO.classAvailC >= 0) ? _availabilityVO.classAvailC.toString() : "0";
						seatAvail += (_availabilityVO.classAvailC >= 0) ? _availabilityVO.classAvailC : 0;
						availData += "C" + cClass + "  ";
					}
					
					if(!isNaN(_availabilityVO.classAvailY))
					{
						yClass = (_availabilityVO.classAvailY >= 0) ? _availabilityVO.classAvailY.toString() : "0";
						seatAvail += (_availabilityVO.classAvailY >= 0) ? _availabilityVO.classAvailY : 0;
						availData += "Y" + yClass + "  ";
					}
					
					
					if(!isNaN(_availabilityVO.classAvailJ))
					{
						jClass = _availabilityVO.classAvailJ.toString();//(_availabilityVO.classAvailJ >= 0) ? _availabilityVO.classAvailJ.toString() : "0";
						seatAvail += (_availabilityVO.classAvailJ >= 0) ? _availabilityVO.classAvailJ : 0;
						availData += "J" + jClass + "  ";
					}
					
					if(!isNaN(_availabilityVO.classAvailW))
					{
						wClass = _availabilityVO.classAvailW.toString();//(_availabilityVO.classAvailW >= 0) ? _availabilityVO.classAvailW.toString() : "0";
						seatAvail += (_availabilityVO.classAvailW >= 0) ? _availabilityVO.classAvailW : 0;
						availData += "W" + wClass + "  ";
					}
					
					if(!isNaN(_availabilityVO.classAvailM))
					{
						mClass = _availabilityVO.classAvailM.toString();//(_availabilityVO.classAvailM >= 0) ? _availabilityVO.classAvailM.toString() : "0";
						seatAvail += (_availabilityVO.classAvailM >= 0) ? _availabilityVO.classAvailM : 0;
						availData += "M" + mClass + "  ";
					}
					
					
					
					if(!isNaN(_availabilityVO.classAvailE))
					{
						eClass = _availabilityVO.classAvailE.toString();
						seatAvail += _availabilityVO.classAvailE;
						availData += "E" + eClass + "  ";
					}
					
					
					if(!isNaN(_availabilityVO.classAvailX))
						availData += "X" + ((_availabilityVO.classAvailX >= 0) ? _availabilityVO.classAvailF.toString() : "0");
					
					seats='';
					seats = String(seatAvail);
					
					cabinData='';
					cabinData= availData;

				}
				
			}
			
			
			private function calculateTotalAvailability(route:RouteVO):String
			{
				var doAvailCount:int=-2;
				var flightseats:int=1000;
				for(var m:int=0;m<route.fltLegs.length;m++)
				{
					var flightLeg:FlightLegVO=route.fltLegs[m] as FlightLegVO;
					if(flightLeg.cabinData==''|| flightLeg.cabinData==null)
					{
						doAvailCount=0;
					}
					else
					{
						doAvailCount=1;
						if(flightseats>Number(flightLeg.seats))
							flightseats=Number(flightLeg.seats);
							
					}
						
					
				}
				
				if(doAvailCount==1)
				{
					return String(flightseats);
				}
				
				else
					return null;
				
				
			}
			
			private function getCabinAvailabiliyMultiResultHandler(resultEvent:ResultEvent):void
			{
				var availablityList:ArrayCollection = resultEvent.result as ArrayCollection;
				
				for(var i:int = 0; i < availablityList.length; i++)
				{
					var faVO:FlightAvailabilityVO = availablityList[i] as FlightAvailabilityVO;
					
					populateAvailability(faVO);
					
					if(faVO.status != null && faVO.status.length > 0)
						break;
				}
			}
			
			 private function getCabinAvailabiliyResultHandler(resultEvent:ResultEvent):void
			{
				 var faVO:FlightAvailabilityVO = resultEvent.result as FlightAvailabilityVO;
				 
				 populateAvailability(faVO);
			}
			
			private function populateAvailability(faVO:FlightAvailabilityVO):void
			{
				if(faVO.status == null || faVO.status == "")
					{
					var key:String = faVO.flightNumber + faVO.depSta + faVO.arvSta + faVO.flightDate;
						
					for(var h:int = 0; h < alfaData.getAvailList.length; h++)
						{
						var availObj:GetAvailVO = alfaData.getAvailList[h] as GetAvailVO;
						var flightData:BasicFlightDataVO= availObj.fltData;
						
						var flightKey:String = flightData.flightNumber + flightData.depSta + flightData.arvSta + flightData.flightDate;
						
						if(key != flightKey)
							continue;

						for(var v:int=0;v<availObj.fltLocation.length;v++)
							{
							var flightLocation:String=availObj.fltLocation[v];
							var d:Array= flightLocation.split(",");
							var routeID:int= Number(d[0]);
							var index:int= Number(d[1]);

							for(var k:int=0;k<routeData.length;k++)
								{
								var route:RouteVO= routeData[k] as RouteVO;
								var flightLegs:Array= route.fltLegs;

								if(routeID != route.routeID)
									continue;

								var flightLeg:FlightLegVO=flightLegs[index];
								var availabilityVO:AvailabilityVO=faVO.availabilityVO;
								if(availabilityVO)
									{
									assignSeats(availabilityVO);
									flightLeg.seats=seats;
									flightLeg.cabinData=cabinData; 
									}
								
								var totalAvail:String=calculateTotalAvailability(route);
								
								var setTotalAvail:Boolean=true;
								
								for (var l:int=0;l<flightLegs.length;l++)
									{
									var flightleg:FlightLegVO= flightLegs[l];
									if(flightleg.cabinData==''|| flightleg.cabinData==null||StringUtil.trim(flightleg.cabinData)=='')
										setTotalAvail=false;
									}
								
								if(setTotalAvail==true && totalAvail!=null)	 
									{ 
									route.totalSeats='';
									route.totalSeats=String(totalAvail);
									}
								else
									route.totalSeats='';
								}
							}
						}
					}
				else{
					isGetAvailCancelled = true;
					Alert.show(faVO.status);
					}
					
				++pendingAvailDone;
				--requestSent;
				
				stillPending.text = String(totalPendingAvail - pendingAvailDone);
				
				if((pendingAvailDone % 10) == 0 || requestSent == 0)
					routeData.refresh();
				
				if(!isGetAvailCancelled)
					getAvailForPendingFlights(1);
				else if(requestSent == 0)
					isGetAvailCancelled = false; 
				
				if(requestSent == 0)
					isAvailRunning = false;
			}
			
			private function getCabinAvailabiliyFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
				
				++pendingAvailDone;
				--requestSent;
				
				stillPending.text = String(totalPendingAvail - pendingAvailDone);
				
				if((pendingAvailDone % 10) == 0 || requestSent == 0)
					routeData.refresh();
				
				if(!isGetAvailCancelled)
					getAvailForPendingFlights(1);
				else if(requestSent == 0)
					isGetAvailCancelled = false;
				
				if(requestSent == 0)
					isAvailRunning = false;
			}
			
			
			private function getCabinAvailabiliyMultiFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
				
				++pendingAvailDone;
				requestSent = requestSent-jalFlightCount;
				
				stillPending.text = String(totalPendingAvail - pendingAvailDone);
				
				if((pendingAvailDone % 10) == 0 || requestSent == 0)
					routeData.refresh();
				
				if(!isGetAvailCancelled)
					getAvailForPendingFlights(1);
				else if(requestSent == 0)
					isGetAvailCancelled = false;
				
				if(requestSent == 0)
					isAvailRunning = false;
			}

			public function startFiltering(item:Object):Boolean
			{

				var routeforFiltering:RouteVO= item as RouteVO;
				var seatsAvailable:int=Number(routeforFiltering.totalSeats);
				var flightLegs:Array= routeforFiltering.fltLegs;
				
				var flight:FlightLegVO=null;
				var legLength:Number =0;				
				
					var routeAirlineCodes:Array=new Array();
					var b:int=0;
					var flightCount:Number =0;
					for(var i:int=0;i<flightLegs.length;i++)
					{
						flight = flightLegs[i];
						routeAirlineCodes[b]=flight.airline;
						b++;
						flightCount++;
						
					}
					
					if(filterAirlineCodes.length >0)
					{
						routeAirlineCodes.sort();
					
					
					if(routeAirlineCodes.length > 1)
					{
						
						var s:int=0;
						do
						{ 
							if(routeAirlineCodes[s] == routeAirlineCodes[s+1])
							{
								routeAirlineCodes.splice(s,1);
								s--;
							}
							s++;
						}while(s< routeAirlineCodes.length)
						
					}
					
					
					var matchCount:int=0;
					var legcount:int=routeAirlineCodes.length;
					var filtercriteriacount:int=filterAirlineCodes.length;
					
					if(filtercriteriacount < legcount )
						matchCount=0;
					else
					{
						for(var p:int=0; p< legcount;p++)
						{
							for(var q:int=0; q < filtercriteriacount;q++)
							{
								if(routeAirlineCodes[p]==filterAirlineCodes[q])
									matchCount++;
							}
							
						}
					}
					
					
					if(matchCount == legcount)	
					{
						if(fAvl.selected)
						{
							if(seatsAvailable>0)
							{
								if(fnonstop.selected)
								{
									legLength = 1;
									if(legLength == flightCount)
										return true;
								}
								
								if(fonestop.selected)
								{
									legLength=2;
									if(legLength ==flightCount)
										return true;
								}
								if(ftwostops.selected)
								{
									legLength =3;
									if(legLength == flightCount)
										return true;
								}
								if(!fnonstop.selected && !fonestop.selected && !ftwostops.selected)
									return true;
							//return false;
							}
							return false;
						}
						
						
						if(!fAvl.selected)
						{
							if(fnonstop.selected)
								{
									legLength = 1;
									if(legLength == flightCount)
										return true;
								}
								
							if(fonestop.selected)
								{
									legLength=2;
									if(legLength ==flightCount)
										return true;
								}
							if(ftwostops.selected)
								{
									legLength =3;
									if(legLength == flightCount)
										return true;
								}
							if(!fnonstop.selected && !fonestop.selected && !ftwostops.selected)
									return true;
							
						}
						return false;
						
					}
					
				}
					
				if(filterAirlineCodes.length ==0)
					{
						if(fAvl.selected)
						{
							if(seatsAvailable >0)
							{
								if(fnonstop.selected)
								{
									legLength = 1;
									if(legLength == flightCount)
										return true;
								}
								
								if(fonestop.selected)
								{
									legLength=2;
									if(legLength ==flightCount)
										return true;
								}
								if(ftwostops.selected)
								{
									legLength =3;
									if(legLength == flightCount)
										return true;
								}
								
								if(!fnonstop.selected && !fonestop.selected && !ftwostops.selected)
									return true;
							}
							return false;
						}
						
						if(!fAvl.selected)
						{
							if(fnonstop.selected)
							{
								legLength = 1;
								if(legLength == flightCount)
									return true;
							}
							
							if(fonestop.selected)
							{
								legLength=2;
								if(legLength ==flightCount)
									return true;
							}
							if(ftwostops.selected)
							{
								legLength =3;
								if(legLength == flightCount)
									return true;
							}

						}

				}

				
				if(filterAirlineCodes.length==0 &&!fAvl.selected && !fnonstop.selected && !fonestop.selected && !ftwostops.selected)
					return true;

					return false;	
			}

			protected var filterAirlineCodes:Array=new Array();
			
			protected function filterresults_clickHandler(event:MouseEvent):void
			{	
				filterAirlineCodes.length=0;
				var airlineselection:String='';
				
				if(fAA.selected)
					filterAirlineCodes.push("AA");

				if(fBA.selected)
					filterAirlineCodes.push("BA");

				if(fIB.selected)
					filterAirlineCodes.push("IB");

				if(fJL.selected)
					filterAirlineCodes.push("JL");

				 if(fAY.selected)
					filterAirlineCodes.push("AY") 
						
				 if(fUS.selected)
					filterAirlineCodes.push("US");  

				filterAirlineCodes.sort();
				
				routeData.filterFunction = startFiltering;
				routeData.refresh();
			}
		
			public function startGettingAvailButton():void
			{
				if(totalPendingAvail < 1)
					return;

				if(listTimeStamp != null)
					{
					var timeElapsed:Number = (new Date()).time - listTimeStamp.time;
						
					if((timeElapsed / 1000) >= 180)
						{
						Alert.show("List Older Than 3 Minutes, Availability MAY Have Changed. Please Search Again.","PLEASE NOTE:");
						return;
						}
					}

				getAvailForPendingFlights(5);
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:controlBarContent>
		<s:HGroup width="100%" height="100%" horizontalAlign="left" verticalAlign="middle">
			<s:Image width="50" height="50" scaleMode="letterbox" source="{applogo}"/>
			<s:HGroup gap="0" verticalAlign="bottom">
				
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="36"
						 fontStyle="normal" fontWeight="bold" text="AL"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="ternate "/>
				<s:Spacer width="10"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="36"
						 fontStyle="normal" fontWeight="bold" text="F"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="lights   "/>
				<s:Spacer width="10"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="and"/>
				<s:Spacer width="10"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="36"
						 fontStyle="normal" fontWeight="bold" text="A"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="vailability "/>
			</s:HGroup>
			
			<s:Spacer width="10%"/>
			<s:Label color="#00009C" fontFamily="Verdana" fontSize="10"
					 fontStyle="normal" fontWeight="bold"
					 text="Build Date: 18FEB2014" click="getBackEndBuildDate()"/>
			
			<s:Spacer width="100%"/>
			<s:Label id="tiUser" fontFamily="Verdana" fontSize="10" fontStyle="italic" fontWeight="bold"/>

			<!-- s:Spacer width="100%"/ -->
			<!-- s:Button id="LogOutButton" visible="false" label="Logout" color="#00009C" fontWeight="bold" includeInLayout="true"/ -->
		</s:HGroup>		 
	</s:controlBarContent>
	
	<s:HGroup id="hg" visible="true" width="100%" height="100%"
			  maxHeight="{FlexGlobals.topLevelApplication.height}"
			  gap="3" includeInLayout="true">
		<s:Scroller id="leftscroll" visible="true" height="100%" includeInLayout="true"
					verticalScrollPolicy="auto">
			<s:VGroup height="100%" includeInLayout="true">
				
				<s:SkinnableContainer id="Availprogressbox" width="260" horizontalCenter="0" skinClass="skin.AvailabilityBoxSkin">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					
					<s:Label color="#FFFFFF" fontSize="20" fontWeight="bold" text="Availability Process:"/>
					
					<s:BorderContainer visible="true" width="100%" height="100%"
									   borderColor="{(isAvailRunning ? 0xB40000 : 0x007F00)}"
									   borderStyle="solid" borderWeight="2" horizontalCenter="0"
									   includeInLayout="true">
						<s:layout>
							<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingTop="2"/>
						</s:layout>
						
						<s:VGroup id="statusBox" visible="true" fontWeight="bold">
							<s:HGroup includeInLayout="true">
								<s:Label color="{(isAvailRunning ? 0xB40000 : 0x007F00)}" text="Status: "/> 
								<s:Label color="{(isAvailRunning ? 0xB40000 : 0x007F00)}" text="{(isAvailRunning ? 'Running...' : 'Stopped')}"/>
							</s:HGroup>
							<s:HGroup includeInLayout="true">
								<s:Label color="{(isAvailRunning ? 0xB40000 : 0x007F00)}" text="Flights Pending Availability: "/>
								<s:Label id="stillPending" color="{(isAvailRunning ? 0xB40000 : 0x007F00)}"/>
							</s:HGroup>
							<s:Label visible="{isGetAvailCancelled}" color="#B40000" text="CANCELLING...One Moment..."/>
							<s:HGroup  horizontalAlign="center" gap="20">	
								<s:Button id="cxlbtn" label="Stop"
										  click="{isGetAvailCancelled = true;}"
										  color="{(isAvailRunning ? 0xB40000 : 0x007F00)}"
										  enabled="{isAvailRunning}"/>
								<s:Button label="Start"
										  click="{isGetAvailCancelled = false; startGettingAvailButton();}"
										  color="{(isAvailRunning ? 0xB40000 : 0x007F00)}"
										  enabled="{!isAvailRunning}"/>
							</s:HGroup>
						</s:VGroup>
					</s:BorderContainer>
				</s:SkinnableContainer>

				<s:SkinnableContainer width="260" backgroundColor="#FFFFFF" skinClass="skin.AvailabilityBoxSkin">
					<s:VGroup width="100%">
						<s:Label color="#FFFFFF" fontSize="20" fontWeight="bold" text="Last Search:"/>
						<s:Spacer/>
						
						<s:BorderContainer id="newSearch"  
										   borderWeight="2" borderStyle="solid" includeInLayout="true"
										   width="100%" horizontalCenter="0">
							<s:layout>
								<s:VerticalLayout paddingBottom="2" paddingLeft="2" paddingTop="2"/>
							</s:layout>
							
							<s:HGroup>
								<s:VGroup id="scNames">
									<s:Label name="name1"  fontWeight="bold"/>
									<s:Label name="name2"  fontWeight="bold"/>
									<s:Label name="name3"  fontWeight="bold"/>
									<s:Label name="name4"  fontWeight="bold"/>
									<s:Label name="name5"  fontWeight="bold"/>
									<s:Label name="name6"  fontWeight="bold"/>
									<s:Label name="name7"  fontWeight="bold"/>
									<s:Label name="name8"  fontWeight="bold"/>
									<s:Label name="name9"  fontWeight="bold"/>
								</s:VGroup>
								<s:VGroup id="scVals">
									<s:Label name="val1"/>
									<s:Label name="val2"/>
									<s:Label name="val3"/>
									<s:Label name="val4"/>
									<s:Label name="val5"/>
									<s:Label name="val6"/>
									<s:Label name="val7"/>
									<s:Label name="val8"/>
									<s:Label name="val9"/>
								</s:VGroup>
							</s:HGroup>
							<s:Label id="valAirlines"/>
							
						</s:BorderContainer>
						
						<s:Spacer height="10"/>
						<s:HGroup>
							<s:Button enabled="{!isAvailRunning}" label="NEW Search" fontWeight="bold" click="{displaySearchCriteria();}" />
						</s:HGroup>
						
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer enabled="{!isAvailRunning}" width="260" backgroundColor="#FFFFFF" skinClass="skin.AvailabilityBoxSkin">
					<s:VGroup width="100%">
						
						<s:Label color="#FFFFFF" fontSize="20" fontWeight="bold" text="Filter Results:"/>

						<s:BorderContainer width="100%" borderStyle="solid" borderWeight="2"
										   horizontalCenter="0" includeInLayout="true">
							
							<s:Group  left="2" right="2" top="2" bottom="2">
								<s:layout>
									<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"/>
								</s:layout>
								
								<s:Label fontWeight="bold" text="Airlines:"/>
								
								<s:HGroup>
									<s:CheckBox id="fAA" label="AA"/>
									<s:CheckBox id="fBA" label="BA"/>
									<s:CheckBox id="fIB" label="IB"/>
								</s:HGroup>
								<s:HGroup>
									<s:CheckBox id="fJL" label="JL"/>
									<s:CheckBox id="fAY" label="AY"/>
									<s:CheckBox id="fUS" label="US"/>
								</s:HGroup>								
								
								<s:Spacer height="4"/>
								<s:Label fontWeight="bold" text="Connections:"/>
								<s:HGroup>
									<s:CheckBox id="fnonstop"  label="1 Leg"/>
									<s:CheckBox id="fonestop"  label="2 Leg"/>
									<s:CheckBox id="ftwostops" label="3 Leg"/>
								</s:HGroup>
								
								<s:Spacer height="4"/>
								<s:HGroup verticalAlign="middle">
									<s:Label fontWeight="bold" text="Available Routes Only:"/>
									<s:CheckBox id="fAvl"/>
								</s:HGroup>
								
								<s:HGroup width="100%" horizontalAlign="center">
									<s:Button id="Filter" label="Apply Filter"
											  click="{filterresults_clickHandler(event)}"
											  fontWeight="bold" horizontalCenter="0"/>
								</s:HGroup>
							</s:Group>
							
						</s:BorderContainer>
					</s:VGroup>
				</s:SkinnableContainer>
				
			</s:VGroup>
		</s:Scroller>

		
		<s:DataGrid id="displayresults" width="100%" height="100%" dataProvider="{routeData}"
					variableRowHeight="true" skinClass="skin.DataGridSkin">

			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="rank" headerText="--"
								  itemRenderer="itemrenderers.ResultGridItemRenderer" sortable="false" width="1500"/>
					<s:GridColumn dataField="rowIndex" itemRenderer="itemrenderers.LineCountItemRenderer" sortable="false" width="35"/>
								  
				</s:ArrayList>
			</s:columns>

		</s:DataGrid>
		
		
	</s:HGroup>
	
	
</s:Application>
