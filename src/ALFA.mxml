<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="com.aa.rpt.apps.owr.view.*"
			   controlBarVisible="true"
			   creationComplete="displaySearchCriteria(true)"
			   skinClass="skin.ApplicationSkin">
	
	<fx:Style source="css\index.css"/>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DateTimeFormatter id="ddmmmyyyyhhmm" dateTimePattern="ddMMMyyyyHHmm"/>
		<s:DateTimeFormatter id="ddmmmyyyyhhmm2" dateTimePattern="ddMMM HH:mm"/>
		<s:DateTimeFormatter id="ddmmmyyyy" dateTimePattern="ddMMMyyyy"/>
		<s:DateTimeFormatter id="mmddyyyy" dateTimePattern="MMddyyyy"/>
			
		<s:RemoteObject id="connectionAdvisorRemoteObject" concurrency="multiple"
						destination="AvailFinderServiceDestination" showBusyCursor="true">

			<s:method fault="{getBackEndBuildDateFaultHandler(event)}"
					  name="getBackEndBuildDate"
					  result="{getBackEndBuildDateResultHandler(event)}"/>

			<s:method fault="{getConnectionsByMarketFaultHandler(event)}"
					  name="getConnectionsByMarket"
					  result="{getConnectionsByMarketResultHandler(event)}"/>
			
			<s:method fault="{getConnectionsByFlightFaultHandler(event)}"
					  name="getConnectionsByFlight"
					  result="{getConnectionsByFlightResultHandler(event)}"/>
			
			<s:method concurrency="multiple" 
					  fault="{getCabinAvailabiliyFaultHandler(event)}"
					  name="getCabinAvailabiliy" 
					  result="{getCabinAvailabiliyResultHandler(event)}"/>
			
			<s:method concurrency="multiple" 
					  fault="{getCabinAvailabiliyMultiFaultHandler(event)}"
					  name="getCabinAvailabiliyMulti" 
					  result="{getCabinAvailabiliyMultiResultHandler(event)}"/>
		</s:RemoteObject>
		
		<s:HTTPService id="httpUserService" fault="userAccessFaultHandler(event)" result="userAccessResultHandler(event)" resultFormat="e4x"/>

	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.aa.rpt.apps.owr.events.GetConnectionsDataEvent;
			import com.aa.rpt.apps.owr.view.NoAccessScreen;
			import com.aa.rpt.apps.owr.view.SearchScreen;
			import com.aa.rpt.apps.owr.vo.AlfaDataVO;
			import com.aa.rpt.apps.owr.vo.AvailabilityVO;
			import com.aa.rpt.apps.owr.vo.BasicFlightDataVO;
			import com.aa.rpt.apps.owr.vo.FlightAvailabilityVO;
			import com.aa.rpt.apps.owr.vo.FlightLegVO;
			import com.aa.rpt.apps.owr.vo.GetAvailVO;
			import com.aa.rpt.apps.owr.vo.GetConnectionsByMarketInputParmVO;
			import com.aa.rpt.apps.owr.vo.RouteVO;
			import com.aa.rpt.apps.owr.vo.SearchScreenVO;
			
			import mx.collections.ArrayCollection;
			import spark.collections.Sort;
			import spark.collections.SortField
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.core.FlexGlobals;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.URLUtil;
			
			import spark.components.BorderContainer;
			import spark.components.Label;
			
			[Embed(source="images/rarrow.png")] 
				[Bindable]static private var rArrow:Class;
			[Embed(source="images/200px-Oneworld_logo_svg.png")]
				[Bindable]static private var applogo:Class;
			
			[Bindable] public var routeList:ArrayCollection;
			
			public var uniqueFltsList:ArrayCollection;
			
			private var searchScreen:SearchScreen;
			private var curParms:SearchScreenVO = null;
			private var mktParms:SearchScreenVO = null;
			private var fltParms:SearchScreenVO = null;
			
			[Bindable] private var cancelGetAvail:Boolean = false;
			[Bindable] private var isAvailRunning:Boolean = false;
			[Bindable] private var availComplete:Boolean = true;
			[Bindable] private var hasAvailRoutes:Boolean = false;

			[Bindable] private var fltsPendingAvail:ArrayCollection = new ArrayCollection();

			private var listTimeStamp:Date;
			
			protected var filterAirlineCodes:Array;

			//
			//////////////////////////////////////////////
			public function displaySearchCriteria(checkSiteMinderRole:Boolean = false):void
			{
				if(checkSiteMinderRole)
					{
					httpUserService.url = getServletURL();
					httpUserService.send();
					}

				searchScreen = SearchScreen(PopUpManager.createPopUp(this, SearchScreen, true));
				searchScreen.addEventListener('getConnectionsEvent', requestDataFromServer);
				PopUpManager.centerPopUp(searchScreen);
				searchScreen.populateControls(curParms, mktParms, fltParms);
			}
			
			private function getServletURL():String
			{
				var bm:IBrowserManager = BrowserManager.getInstance();
				bm.init();
				var url:String = bm.url;
				var serverNameWithPort:String = URLUtil.getServerNameWithPort(url);
				//filtering out the http and https part
				var subURL:String = url.substr(url.lastIndexOf(serverNameWithPort));
				subURL = subURL.replace("\//","\////");
				var tokens:Array = subURL.split("/");
				var webContext:String = tokens[1];
				var userProfileServlet:String;

				if(url.search("http") == -1)
					{
					userProfileServlet = "http://localhost:8080/reaccom7-alfa/UserProfileServlet";
					//userProfileServlet = "http://rmread013.tul.aa.com/reaccom7/UserProfileServlet?mode='test'";
					//userProfileServlet = "https://reaaccom-stg1.aa.com/reaccom7/UserProfileServlet";
					//userProfileServlet = "https://reaaccom-cert.aa.com/reaccom7/UserProfileServlet";
					}
				else{
					userProfileServlet = "http://"+serverNameWithPort+"/"+webContext+"/UserProfileServlet";
					}

				return userProfileServlet;
			}

			protected function userAccessResultHandler(event:ResultEvent):void
			{
				var xml:XML = null;
				
				if(event != null && event.result != null)
					xml = event.result as XML;
				
				if(xml == null || xml..userRole == "NOACCESS")
					{
					var na:NoAccessScreen = NoAccessScreen(PopUpManager.createPopUp(this, NoAccessScreen, true));

					if(xml != null)
						na.setRole(xml..userId);
					
					PopUpManager.centerPopUp(na);
					}
				
				if(xml != null)
					tiUser.text = xml..firstName + " " + xml..lastName + " [" + xml..userRole + "]";
			}
			
			protected function userAccessFaultHandler(event:FaultEvent):void
			{
				userAccessResultHandler(null);
				Alert.show(event.fault.toString());
			}
			
			protected function getBackEndBuildDate():void
			{
				connectionAdvisorRemoteObject.getOperation('getBackEndBuildDate').send();
			}

			//
			///////////////////////////////////////////////////////////
			public function requestDataFromServer(data:GetConnectionsDataEvent):void
			{
				if(data.inputParmsVO == null)
					{
					searchScreen.removeEventListener('getConnectionsEvent', requestDataFromServer);
					PopUpManager.removePopUp(searchScreen);
					return;
					}
				
				var reqParms:GetConnectionsByMarketInputParmVO = new GetConnectionsByMarketInputParmVO();

				curParms = data.inputParmsVO;
				
				if(curParms.searchType == 0)
					{
					mktParms = curParms;

					reqParms.depSta = mktParms.depSta;
					reqParms.arvSta = mktParms.arvSta;
					reqParms.minDate = ddmmmyyyyhhmm.format(mktParms.depDateMin);
					reqParms.maxDate = ddmmmyyyyhhmm.format(mktParms.depDateMax);
					reqParms.domesticconnectTime = mktParms.domConxTime;
					reqParms.internationalconnectTime = mktParms.intConxTime;
					reqParms.sistercities = mktParms.useSisterCities;
					reqParms.miles = mktParms.maxMileage;
					reqParms.mileagePercent = mktParms.isMileageInPercent;
					reqParms.legs = String(mktParms.numConx);
					reqParms.avoidStations = mktParms.avoidStations;
					reqParms.airlineCodes = mktParms.validAirlines;
					
					connectionAdvisorRemoteObject.getOperation('getConnectionsByMarket').send(reqParms);
					}
				else{
					fltParms = curParms;

					if(fltParms.fltDepSta.length == 3 && fltParms.fltArvSta.length == 3 )
						{
						reqParms.flightNumber = Number(fltParms.fltNum);
						reqParms.airlineCodes = fltParms.fltAirline;
						reqParms.minDate = ddmmmyyyy.format(fltParms.fltDate);
						reqParms.depSta = fltParms.fltDepSta;
						reqParms.arvSta = fltParms.fltArvSta;

						connectionAdvisorRemoteObject.getOperation('getConnectionsByMarket').send(reqParms);
						}
					else{
						var fltDate:String = ddmmmyyyy.format(fltParms.fltDate);

						connectionAdvisorRemoteObject.getOperation('getConnectionsByFlight').send(fltParms.fltNum, fltParms.fltAirline, fltDate);
						}
					}
			}

			private function getConnectionsByMarketResultHandler(resultEvent:ResultEvent):void
			{
				if(resultEvent == null || resultEvent.result == null)
					return;
				
				processRouteDataResponse(resultEvent.result as AlfaDataVO);
			}
			
			private function getConnectionsByFlightResultHandler(resultEvent:ResultEvent):void
			{
				if(resultEvent == null || resultEvent.result == null)
					return;
				
				processRouteDataResponse(resultEvent.result as AlfaDataVO);
			}
			
			private function getBackEndBuildDateResultHandler(resultEvent:ResultEvent):void
			{
				Alert.show(resultEvent.result as String);
			}

			private function getConnectionsByMarketFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
			}
			
			private function getConnectionsByFlightFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
			}
			
			private function getBackEndBuildDateFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show("Cannot Determine Back End Build Date...Back End is Most Likely Out of Date");
			}
			
			//
			///////////////////////////////////////////////////////////
			private function processRouteDataResponse(alfaDataVO:AlfaDataVO):void
			{
				if(alfaDataVO.routeList.length == 0)
					{
					Alert.show((alfaDataVO.status == null ? "No Routes Found For This Market" : alfaDataVO.status));
					return;
					}
				
				searchScreen.removeEventListener('getConnectionsEvent', requestDataFromServer);
				PopUpManager.removePopUp(searchScreen);
				
				listTimeStamp = null;
				
				if(routeList != null)
					routeList.removeAll();
				
				if(uniqueFltsList != null)
					uniqueFltsList.removeAll();
				
				hasAvailRoutes = false;
				
				routeList = alfaDataVO.routeList;
				uniqueFltsList = alfaDataVO.getAvailList;
				
				for(var i:int = 1; i <= 9; i++)
					{
					var theName:Label = Label(scNames.getChildByName("name" + String(i)));
					var theVal:Label  = Label(scVals.getChildByName("val" + String(i)));
					
					if(curParms.searchType == 0)
						{
						switch(i)
							{
							case 1:
								theName.text = "Market:";
								theVal.text = curParms.depSta + " to " + curParms.arvSta;
								break;
							case 2:
								theName.text = "Sister Cities:";
								theVal.text = (curParms.useSisterCities ? "Yes" : "No");
								break;
							case 3:
								theName.text = "DEP Time Start:";
								theVal.text = ddmmmyyyyhhmm2.format(curParms.depDateMin);
								break;
							case 4:
								theName.text = "DEP Time End:";
								theVal.text = ddmmmyyyyhhmm2.format(curParms.depDateMax);
								break;
							case 5:
								theName.text = "Max Conx Time:";
								theVal.text = "Dom:" + String(curParms.domConxTime) + "; Intl:" + String(curParms.intConxTime);
								break;
							case 6:
								theName.text = "Max Mileage:";
								theVal.text = (curParms.isMileageInPercent ? (String(curParms.maxMileage) + " Multiplier") : String(curParms.maxMileage));
								break;
							case 7:
								theName.text = "Avoid Stations:";
								theVal.text = (curParms.avoidStations.length == 0 ? "None" : curParms.avoidStations);
								break;
							case 8:
								theName.text = "Max Legs:";
								theVal.text = String(curParms.numConx);
								break;
							case 9:
								theName.text = "Airlines:";
								if(curParms.validAirlines.length == 0)
									{
									theVal.text = "All"
									valAirlines.text = "";
									}
								else{
									theVal.text = "";
									valAirlines.text = "   [" + curParms.validAirlines + "]";
									}
								break;
							}
						}
					else{
						switch(i)
							{
							case 1:
								theName.text = "Flight Number:";
								theVal.text = curParms.fltNum;
								break;
							case 2:
								theName.text = "Market:";
								theVal.text = curParms.fltDepSta + "  " + curParms.fltArvSta;
								break;
							case 3:
								theName.text = "Flight Date:";
								theVal.text = ddmmmyyyyhhmm2.format(curParms.fltDate);
								break;
							case 4:
								theName.text = "Airline:";
								theVal.text = curParms.fltAirline;
								valAirlines.text = "";
								break;
							default:
								theName.text = "";
								theVal.text = "";
								break;
							}
						}
					}
				
				fAA.selected = false;
				fBA.selected = false;
				fIB.selected = false;
				fJL.selected = false;
				fAY.selected = false; 
				fUS.selected = false;  
				fnonstop.selected = false;
				fonestop.selected = false;
				ftwostops.selected = false;
				fAvlOnly.selected = false;
				fAvlSort.selected = false;
				
				getAvailForPendingFlights(true);
			}

			// NEW NEW
			///////////////////////////////////////////////////////////
			private function getAvailForPendingFlights(firstTime:Boolean = false):void
			{
				var theFlt:BasicFlightDataVO;
				
				if(firstTime)
					{
					fltsPendingAvail.removeAll();
						
					for(var i:int = 0; i < uniqueFltsList.length; i++)
						{
						theFlt = GetAvailVO(uniqueFltsList[i]).fltData;
						theFlt.clientIndex = i;
						fltsPendingAvail.addItem(theFlt);
						}
					
					availComplete = cancelGetAvail = isAvailRunning = false;
					
					stillPending.text = String(fltsPendingAvail.length);
					
					if(curParms.suppressAvail)
						return;
					}

				if(cancelGetAvail || fltsPendingAvail.length == 0)
					{
					cancelGetAvail = isAvailRunning = false;
					
					if(fltsPendingAvail.length == 0)
						availComplete = true;
					
					return;
					}
				
				isAvailRunning = true;
				
				var fltsToGetAvail:ArrayCollection = new ArrayCollection();
				
				for(var curIdx:int = 0; curIdx < fltsPendingAvail.length; )
					{
					theFlt = fltsPendingAvail.getItemAt(curIdx) as BasicFlightDataVO;
					
					if(theFlt.airlineCode == 'JL')
						++curIdx;
					else{
						fltsToGetAvail.addItem(theFlt);
						fltsPendingAvail.removeItemAt(curIdx);
						
						if(fltsToGetAvail.length == 100)
							break;
						}
					}
				
				if(fltsToGetAvail.length > 0)
					{
//					mx.controls.Alert.show("Sending NON JAL: " + fltsToGetAvail.length + ";  Left: " + fltsPendingAvail.length);
					connectionAdvisorRemoteObject.getOperation('getCabinAvailabiliyMulti').send(fltsToGetAvail);
					fltsToGetAvail.removeAll();
					}
				else{
//					mx.controls.Alert.show("Sending JAL: " + fltsPendingAvail.length);
					connectionAdvisorRemoteObject.getOperation('getCabinAvailabiliyMulti').send(fltsPendingAvail);
					fltsPendingAvail.removeAll();
					}
				
				if(listTimeStamp == null)
					listTimeStamp = new Date();
			}
			
			private function getCabinAvailabiliyMultiResultHandler(resultEvent:ResultEvent):void
			{
				var availablityList:ArrayCollection = resultEvent.result as ArrayCollection;
				
				for(var i:int = 0; i < availablityList.length; i++)
					{
					var faVO:FlightAvailabilityVO = availablityList[i] as FlightAvailabilityVO;
					
					if(i == 0 && faVO.status != null && faVO.status.length > 0)
						{
						cancelGetAvail = true;
						Alert.show(faVO.status);
						break;
						}
						
					populateAvailability(faVO);
					}
				
				stillPending.text = String(fltsPendingAvail.length);
				routeList.refresh();
				getAvailForPendingFlights();
			}
			
			private function getCabinAvailabiliyMultiFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
				
				stillPending.text = String(fltsPendingAvail.length);
				
				cancelGetAvail = true;
				getAvailForPendingFlights();
			}
			
			private function getCabinAvailabiliyResultHandler(resultEvent:ResultEvent):void
			{
				var faVO:FlightAvailabilityVO = resultEvent.result as FlightAvailabilityVO;
				 
				if(faVO.status == null || faVO.status == "")
					populateAvailability(faVO);
				else{
					cancelGetAvail = true;
				 	Alert.show(faVO.status);
				 	}
				
				stillPending.text = String(fltsPendingAvail.length);
				routeList.refresh();
				getAvailForPendingFlights();
			}
			
			private function getCabinAvailabiliyFaultHandler(faultEvent:FaultEvent):void
			{
				Alert.show(faultEvent.fault.faultCode + faultEvent.fault.faultDetail + faultEvent.fault.faultString);
				
				stillPending.text = String(fltsPendingAvail.length);
				
				cancelGetAvail = true;
				getAvailForPendingFlights();
			}
			
			private function populateAvailability(faVO:FlightAvailabilityVO):void
			{
				var fltLocation:Array = GetAvailVO(uniqueFltsList.getItemAt(faVO.clientIndex)).fltLocation;

				for(var i:int = 0; i < fltLocation.length; i++)
					{
					var rowCol:Array = String(fltLocation[i]).split(","); 
					var route:RouteVO = RouteVO(routeList.getItemAt(int(rowCol[0])));   	// rowCol[0] is the row index
					
					if(faVO.availabilityVO != null)
						assignSeats(faVO.availabilityVO, route.fltLegs[int(rowCol[1])]);	// rowCol[1] is the leg index

					route.totalSeats = calculateTotalAvailability(route);

					if(route.totalSeats > 0)
						hasAvailRoutes = true;
					}
			}
			
			private function assignSeats(avo:AvailabilityVO, flightLeg:FlightLegVO):void
			{
				var cabinData:String = '';
				var seatAvail:Number = 0;
					
				if(!isNaN(avo.classAvailF))
				{
					seatAvail += avo.classAvailF;
					cabinData += "F" + String(avo.classAvailF) + ",";
				}
				
				if(!isNaN(avo.classAvailC))
				{
					seatAvail += avo.classAvailC;
					cabinData += "C" + String(avo.classAvailC) + ",";
				}
				
				if(!isNaN(avo.classAvailY))
				{
					seatAvail += avo.classAvailY;
					cabinData += "Y" + String(avo.classAvailY) + ",";
				}
				
				if(!isNaN(avo.classAvailJ))
				{
					seatAvail += avo.classAvailJ;
					cabinData += "J" + String(avo.classAvailJ) + ",";
				}
				
				if(!isNaN(avo.classAvailW))
				{
					seatAvail += avo.classAvailW;
					cabinData += "W" + String(avo.classAvailW) + ",";
				}
				
				if(!isNaN(avo.classAvailM))
				{
					seatAvail += avo.classAvailM;
					cabinData += "M" + String(avo.classAvailM) + ",";
				}
				
				if(!isNaN(avo.classAvailE))
				{
					seatAvail += avo.classAvailE;
					cabinData += "E" + String(avo.classAvailE) + ",";
				}
				
				if(!isNaN(avo.classAvailX))
				{
					seatAvail += avo.classAvailX;
					cabinData += "X" + String(avo.classAvailX) + ",";
				}
				
				if(cabinData.length > 0)
					 cabinData = cabinData.substring(0, cabinData.length - 1);
				else cabinData = null;
				
				flightLeg.seats = int(seatAvail);
				flightLeg.cabinData = cabinData; 
			}

			private function calculateTotalAvailability(route:RouteVO):int
			{
				var smallestSeats:int = 10000;
				
				for(var i:int = 0; i < route.fltLegs.length; i++)
					{
					var fltLeg:FlightLegVO = route.fltLegs[i] as FlightLegVO;
					
					if(fltLeg.cabinData == null || fltLeg.cabinData == '')
						return(-1);
						
					if(fltLeg.seats < smallestSeats)
						smallestSeats = fltLeg.seats;
					}

				if(smallestSeats == 10000)
					return(-1);
				
				return(smallestSeats);
			}
			
			public function startFiltering(item:Object):Boolean
			{
				if(filterAirlineCodes.length == 0 && !fAvlOnly.selected && !fnonstop.selected && !fonestop.selected && !ftwostops.selected)
					return true;
				
				var thisRoute:RouteVO = item as RouteVO;
				
				var seatsAvailable:int = thisRoute.totalSeats;
				var flightCount:int = thisRoute.fltLegs.length;
				
				if(filterAirlineCodes.length > 0)
					{
					var routeAirlineCodes:Array = new Array();					
					
					for(var i:int = 0; i < flightCount; i++)
						routeAirlineCodes.push(FlightLegVO(thisRoute.fltLegs[i]).airline);

					routeAirlineCodes.sort();
						
					if(routeAirlineCodes.length > 1)
						{
						var s:int=0;

						do 	{
							if(routeAirlineCodes[s] == routeAirlineCodes[s+1])
								{
								routeAirlineCodes.splice(s,1);
								s--;
								}
							s++;
							} while(s< routeAirlineCodes.length);
						}
							
							
					var matchCount:int=0;
					var legcount:int=routeAirlineCodes.length;
					var filtercriteriacount:int=filterAirlineCodes.length;
							
					if(filtercriteriacount < legcount )
						matchCount=0;
					else {
						for(var p:int=0; p< legcount;p++)
							{
							for(var q:int=0; q < filtercriteriacount;q++)
								{
								if(routeAirlineCodes[p]==filterAirlineCodes[q])
									matchCount++;
								}
							}
						}
							
					if(matchCount == legcount)
						{
						if(fAvlOnly.selected)
							{
							if(seatsAvailable > 0)
								{
								if(fnonstop.selected)
									{
									if(flightCount == 1)
										return true;
									}
								if(fonestop.selected)
									{
									if(flightCount == 2)
										return true;
									}
								if(ftwostops.selected)
									{
									if(flightCount == 3)
										return true;
									}
								if(!fnonstop.selected && !fonestop.selected && !ftwostops.selected)
									return true;
										//return false;
								}
							return false;
							}
							
							
						if(!fAvlOnly.selected)
							{
							if(fnonstop.selected)
								{
								if(flightCount == 1)
									return true;
								}
							
							if(fonestop.selected)
								{
								if(flightCount == 2)
									return true;
								}
							
							if(ftwostops.selected)
								{
								if(flightCount == 3)
									return true;
								}
							
							if(!fnonstop.selected && !fonestop.selected && !ftwostops.selected)
								return true;
							}
						
						return false;
						}
					}
						
				if(filterAirlineCodes.length == 0)
					{
					if(fAvlOnly.selected)
						{
						if(seatsAvailable > 0)
							{
							if(fnonstop.selected)
								{
								if(flightCount == 1)
									return true;
								}
							
							if(fonestop.selected)
								{
								if(flightCount == 2)
									return true;
								}
							
							if(ftwostops.selected)
								{
								if(flightCount == 3)
									return true;
								}
								
							if(!fnonstop.selected && !fonestop.selected && !ftwostops.selected)
								return true;
							}
						
						return false;
						}
						
					if(!fAvlOnly.selected)
						{
						if(fnonstop.selected)
							{
							if(flightCount == 1)
								return true;
							}
						
						if(fonestop.selected)
							{
							if(flightCount == 2)
								return true;
							}
						
						if(ftwostops.selected)
							{
							if(flightCount == 3)
								return true;
							}
						}
					}

					return false;	
			}
			
			protected function performFilter():void
			{	
				myFilters.enabled = false;
				
				filterAirlineCodes = new Array();
				
				if(fAA.selected)
					filterAirlineCodes.push("AA");

				if(fBA.selected)
					filterAirlineCodes.push("BA");

				if(fIB.selected)
					filterAirlineCodes.push("IB");

				if(fJL.selected)
					filterAirlineCodes.push("JL");

				if(fAY.selected)
					filterAirlineCodes.push("AY") 
						
				if(fUS.selected)
					filterAirlineCodes.push("US");  

				filterAirlineCodes.sort();
				
				routeList.filterFunction = startFiltering;
				routeList.refresh();
				
				if(fAvlSort.selected)
					{
					if(routeList.sort == null)
						{
						var mySort:Sort = new Sort();
					
						mySort.compareFunction = sortByAvail;
						routeList.sort = mySort;
						routeList.refresh();
						}
					}
				else if(routeList.sort != null)
					{
					routeList.sort = null;
					routeList.refresh();
					}
				
				myFilters.enabled = true;
			}

			public function sortByAvail(a:Object, b:Object, fields:Array = null):int
			{
				var seat1:int = RouteVO(a).totalSeats;
				var seat2:int = RouteVO(b).totalSeats;
	
				if(seat1 == seat2)
					return(0);
				
				if(seat2 == -1)
					return(-1);
				
				if(seat1 == -1)
					return(1);
				
				if(seat1 < seat2)
					return(1);
				
				return(-1);
			}
				
			public function startGettingAvailButton():void
			{
				if(listTimeStamp != null)
					{
					var timeElapsed:Number = (new Date()).time - listTimeStamp.time;
						
					if((timeElapsed / 1000) >= 180)
						{
						Alert.show("List Older Than 3 Minutes, Availability MAY Have Changed. Please Search Again.","PLEASE NOTE:");
						return;
						}
					}
				
				fAA.selected = false;
				fBA.selected = false;
				fIB.selected = false;
				fJL.selected = false;
				fAY.selected = false; 
				fUS.selected = false;  
				fnonstop.selected = false;
				fonestop.selected = false;
				ftwostops.selected = false;
				fAvlOnly.selected = false;
				fAvlSort.selected = false;
				
				performFilter();	// make sure all Routes are NOT filtered out before getting availability
				
				getAvailForPendingFlights();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:controlBarContent>
		<s:HGroup width="100%" height="100%" horizontalAlign="left" verticalAlign="middle">
			<s:Image width="50" height="50" scaleMode="letterbox" source="{applogo}"/>
			<s:HGroup gap="0" verticalAlign="bottom">
				
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="36"
						 fontStyle="normal" fontWeight="bold" text="AL"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="ternate "/>
				<s:Spacer width="10"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="36"
						 fontStyle="normal" fontWeight="bold" text="F"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="lights   "/>
				<s:Spacer width="10"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="and"/>
				<s:Spacer width="10"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="36"
						 fontStyle="normal" fontWeight="bold" text="A"/>
				<s:Label color="#00009C" fontFamily="Brush Script MT" fontSize="28"
						 fontStyle="normal" text="vailability "/>
			</s:HGroup>
			
			<s:Spacer width="10%"/>
			<s:Label color="#00009C" fontFamily="Verdana" fontSize="10"
					 fontStyle="normal" fontWeight="bold"
					 text="Build Date: 26FEB2014" click="getBackEndBuildDate()"/>
			
			<s:Spacer width="100%"/>
			<s:Label id="tiUser" fontFamily="Verdana" fontSize="10" fontStyle="italic" fontWeight="bold"/>

			<!-- s:Spacer width="100%"/ -->
			<!-- s:Button id="LogOutButton" visible="false" label="Logout" color="#00009C" fontWeight="bold" includeInLayout="true"/ -->
		</s:HGroup>		 
	</s:controlBarContent>
	
	<s:HGroup id="hg" visible="true" width="100%" height="100%"
			  maxHeight="{FlexGlobals.topLevelApplication.height}"
			  gap="3" includeInLayout="true">
		<s:Scroller id="leftscroll" visible="true" height="100%" includeInLayout="true"
					verticalScrollPolicy="auto">
			<s:VGroup height="100%" includeInLayout="true">
				
				<s:SkinnableContainer id="Availprogressbox" width="220" horizontalCenter="0" skinClass="skin.AvailabilityBoxSkin">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					
					<s:Label color="#FFFFFF" fontSize="20" fontWeight="bold" text="Availability Process:"/>
					
					<s:BorderContainer visible="true" width="100%" height="100%"
									   borderColor="{(isAvailRunning ? 0xB40000 : 0x007F00)}"
									   borderStyle="solid" borderWeight="2" horizontalCenter="0"
									   includeInLayout="true">
						<s:layout>
							<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingTop="2"/>
						</s:layout>
						
						<s:VGroup id="statusBox" visible="true" fontWeight="bold">
							<s:HGroup includeInLayout="true">
								<s:Label color="{(isAvailRunning ? 0xB40000 : 0x007F00)}" text="Status: "/> 
								<s:Label color="{(isAvailRunning ? 0xB40000 : 0x007F00)}" text="{(isAvailRunning ? 'Running...' : (availComplete ? 'Finished' : 'Stopped'))}"/>
							</s:HGroup>
							<s:HGroup includeInLayout="true">
								<s:Label color="{(isAvailRunning ? 0xB40000 : 0x007F00)}" text="Fights Pending Avail: "/>
								<s:Label id="stillPending" text="0" color="{(isAvailRunning ? 0xB40000 : 0x007F00)}"/>
							</s:HGroup>
							<s:Label visible="{cancelGetAvail}" color="#B40000" text="CANCELLING...One Moment..."/>
							<s:HGroup  horizontalAlign="center" gap="20">	
								<s:Button id="cxlbtn" label="Stop"
										  click="{cancelGetAvail = true;}"
										  color="{(isAvailRunning ? 0xB40000 : 0x007F00)}"
										  enabled="{isAvailRunning}"/>
								<s:Button label="Start"
										  click="{cancelGetAvail = false; startGettingAvailButton();}"
										  color="{(isAvailRunning ? 0xB40000 : 0x007F00)}"
										  enabled="{!isAvailRunning &amp;&amp; !availComplete}"/>
							</s:HGroup>
						</s:VGroup>
					</s:BorderContainer>
				</s:SkinnableContainer>

				<s:SkinnableContainer width="220" backgroundColor="#FFFFFF" skinClass="skin.AvailabilityBoxSkin">
					<s:VGroup width="100%">
						<s:Label color="#FFFFFF" fontSize="20" fontWeight="bold" text="Last Search:"/>
						<s:Spacer/>
						
						<s:BorderContainer id="newSearch"  
										   borderWeight="2" borderStyle="solid" includeInLayout="true"
										   width="100%" horizontalCenter="0">
							<s:layout>
								<s:VerticalLayout paddingBottom="2" paddingLeft="2" paddingTop="2"/>
							</s:layout>
							
							<s:HGroup>
								<s:VGroup id="scNames">
									<s:Label name="name1"  fontWeight="bold"/>
									<s:Label name="name2"  fontWeight="bold"/>
									<s:Label name="name3"  fontWeight="bold"/>
									<s:Label name="name4"  fontWeight="bold"/>
									<s:Label name="name5"  fontWeight="bold"/>
									<s:Label name="name6"  fontWeight="bold"/>
									<s:Label name="name7"  fontWeight="bold"/>
									<s:Label name="name8"  fontWeight="bold"/>
									<s:Label name="name9"  fontWeight="bold"/>
								</s:VGroup>
								<s:VGroup id="scVals">
									<s:Label name="val1"/>
									<s:Label name="val2"/>
									<s:Label name="val3"/>
									<s:Label name="val4"/>
									<s:Label name="val5"/>
									<s:Label name="val6"/>
									<s:Label name="val7"/>
									<s:Label name="val8"/>
									<s:Label name="val9"/>
								</s:VGroup>
							</s:HGroup>
							<s:Label id="valAirlines"/>
							
						</s:BorderContainer>
						
						<s:Spacer height="10"/>
						<s:HGroup>
							<s:Button enabled="{!isAvailRunning}" label="NEW Search" fontWeight="bold" click="{displaySearchCriteria();}" />
						</s:HGroup>
						
					</s:VGroup>
				</s:SkinnableContainer>
				
				<s:SkinnableContainer enabled="{!isAvailRunning}" width="220" backgroundColor="#FFFFFF" skinClass="skin.AvailabilityBoxSkin">
					<s:VGroup width="100%">
						
						<s:Label color="#FFFFFF" fontSize="20" fontWeight="bold" text="Sort and Filter:"/>

						<s:BorderContainer id="myFilters" width="100%" borderStyle="solid" borderWeight="2"
										   horizontalCenter="0" includeInLayout="true">
							
							<s:Group  left="2" right="2" top="2" bottom="2">
								<s:layout>
									<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"/>
								</s:layout>

								<s:HGroup verticalAlign="middle" enabled="{hasAvailRoutes}">
									<s:Label fontWeight="bold" text="Sort By Availability:"/>
									<s:CheckBox id="fAvlSort" change="{performFilter()}"/>
								</s:HGroup>

								<s:HGroup verticalAlign="middle" enabled="{hasAvailRoutes}">
									<s:Label fontWeight="bold" text="Available Routes Only:"/>
									<s:CheckBox id="fAvlOnly" change="{performFilter()}"/>
								</s:HGroup>
								
								<s:Spacer height="4"/>
								<s:Label fontWeight="bold" text="Airlines:"/>
								<s:HGroup>
									<s:CheckBox id="fAA" label="AA" change="{performFilter()}"/>
									<s:CheckBox id="fBA" label="BA" change="{performFilter()}"/>
									<s:CheckBox id="fIB" label="IB" change="{performFilter()}"/>
								</s:HGroup>
								<s:HGroup>
									<s:CheckBox id="fJL" label="JL" change="{performFilter()}"/>
									<s:CheckBox id="fAY" label="AY" change="{performFilter()}"/>
									<s:CheckBox id="fUS" label="US" change="{performFilter()}"/>
								</s:HGroup>								
								
								<s:Spacer height="4"/>
								<s:Label fontWeight="bold" text="Connections:"/>
								<s:HGroup>
									<s:CheckBox id="fnonstop"  label="1 Leg" change="{performFilter()}"/>
									<s:CheckBox id="fonestop"  label="2 Leg" change="{performFilter()}"/>
									<s:CheckBox id="ftwostops" label="3 Leg" change="{performFilter()}"/>
								</s:HGroup>
							</s:Group>
							
						</s:BorderContainer>
					</s:VGroup>
				</s:SkinnableContainer>
				
			</s:VGroup>
		</s:Scroller>

		<s:DataGrid id="displayresults" width="100%" height="100%" dataProvider="{routeList}"
					variableRowHeight="true" skinClass="skin.DataGridSkin">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="rank" headerText="--" itemRenderer="itemrenderers.ResultGridItemRenderer" sortable="false" width="1700"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
	</s:HGroup>
</s:Application>
