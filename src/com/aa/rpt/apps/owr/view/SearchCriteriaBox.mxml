<?xml version="1.0" encoding="utf-8"?>
<!-- SearchCriteriaBox.mxml -->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  skinClass="skin.AvailabilityBoxSkin" xmlns:view="com.aa.rpt.apps.owr.view.*"
					 >
	<fx:Script>
		<![CDATA[
			import com.aa.rpt.apps.owr.events.GetConnectionsDataEvent;
			import com.aa.rpt.apps.owr.vo.SearchScreenVO;
			
			import mx.utils.StringUtil;
			
			import skin.AvailabilityBoxSkin;
			import mx.controls.Alert;

			protected function SearchAgain_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				var secInput:SearchScreenVO;
				secInput=new SearchScreenVO;
				
				secInput.screen_num=2;
				var index:Number;
				
				if(secSearchTab.selectedIndex==0)
				{
					var startdt:Date=createDate(secMarket.secSearchStarttime.date.selectedDate,secMarket.secSearchStarttime.hours.value,secMarket.secSearchStarttime.minutes.value);
					var enddt:Date;
					var tempdate:Date;
					if(secMarket.secSearchEndtime.enabled)
					{
						enddt= createDate(secMarket.secSearchEndtime.date.selectedDate,secMarket.secSearchEndtime.hours.value,secMarket.secSearchEndtime.minutes.value);
					}
					
					if(secMarket.nextday.selected)
					{
						tempdate=secMarket.secSearchStarttime.date.selectedDate;
						tempdate=new Date(secMarket.secSearchStarttime.date.selectedDate.fullYear,secMarket.secSearchStarttime.date.selectedDate.month,secMarket.secSearchStarttime.date.selectedDate.date+1,0,0)
						//enddt=createDate(tempdate,secMarket.secSearchStarttime.hours.value,secMarket.secSearchStarttime.minutes.value);	
						enddt=createDate(tempdate,23,59);	
					}
					
					if(secMarket.twodays.selected)
					{
						tempdate=secMarket.secSearchStarttime.date.selectedDate;
						tempdate=new Date(secMarket.secSearchStarttime.date.selectedDate.fullYear,secMarket.secSearchStarttime.date.selectedDate.month,secMarket.secSearchStarttime.date.selectedDate.date+2,0,0)
						/* enddt=createDate(tempdate,secMarket.secSearchStarttime.hours.value,secMarket.secSearchStarttime.minutes.value); */	
						enddt=createDate(tempdate,23,59);
					}
					if(enddt <= startdt)
						
					{ 
						Alert.show("MAX LEAVE TIME Must Be Greater then MIN LEAVE TIME");
						return;
					}
					
					secInput.strt_date= startdt;
					secInput.end_date=enddt;
					
					if(!secMarket.secSearchAA.selected && !secMarket.secSearchBA.selected &&
						!secMarket.secSearchIB.selected && !secMarket.secSearchJL.selected && !secMarket.secSearchAY.selected && !secMarket.secSearchUS.selected && !secMarket.secSearchALL.selected)
					
					{
						Alert.show("PLEASE SELECT ATLEAST ONE VALID AIRLINE");
						return;
					}
					else
					{
						var marketCarrierClause:String = "";
						if(secMarket.secSearchAA.selected)
							marketCarrierClause += secMarket.secSearchAA.label + ',';
						if(secMarket.secSearchBA.selected)
							marketCarrierClause += secMarket.secSearchBA.label + ',';
						if(secMarket.secSearchIB.selected)
							marketCarrierClause += secMarket.secSearchIB.label + ',';
						if(secMarket.secSearchJL.selected)
							marketCarrierClause += secMarket.secSearchJL.label + ',';  
						 if(secMarket.secSearchAY.selected)
							marketCarrierClause += secMarket.secSearchAY.label + ','; 
						 if(secMarket.secSearchUS.selected)
							marketCarrierClause += secMarket.secSearchUS.label + ',';
						 if(secMarket.secSearchALL.selected)
							 marketCarrierClause="AA,BA,IB,JL,AY,US,";
						
						marketCarrierClause = marketCarrierClause.substr(0, marketCarrierClause.length-1);
						secInput.carrierCodes= marketCarrierClause;
					}
					
					
					
					index= secSearchTab.selectedIndex +1;
					
					secInput.index=index;
					
					
					
					if(secMarket.secSearchTiTo.text==''||StringUtil.trim(secMarket.secSearchTiTo.text)==''
						||secMarket.secSearchTifrom.text==''||StringUtil.trim(secMarket.secSearchTifrom.text)=='')
					{
						Alert.show("PLEASE ENTER A VALID MARKET");
						return;
					}
					else
					{
						secInput.arr_sta= secMarket.secSearchTiTo.text;
						secInput.dep_sta= secMarket.secSearchTifrom.text;
					}
						
					
					
					
					/*searchScreenInputParmsVO.strt_hours=market.dep_strt_time.hours.value;
					searchScreenInputParmsVO.strt_min=market.dep_strt_time.minutes.value;
					
					searchScreenInputParmsVO.end_hours=market.dep_end_time.hours.value;
					searchScreenInputParmsVO.end_min=market.dep_end_time.minutes.value;*/
					
					
					if( secMarket.secSearchdomconnect.text =='')
					{
						Alert.show("PLEASE ENTER A VALUE FOR MAX CONNECT TIME");
						return;
					}
					else
					{
						if(secMarket.secSearchintconnect.text=="INT"||StringUtil.trim(secMarket.secSearchintconnect.text)=='')
							secMarket.secSearchintconnect.text = secMarket.secSearchdomconnect.text;
						
						secInput.domconnect= secMarket.secSearchdomconnect.text;
						secInput.intconnect= secMarket.secSearchintconnect.text;
					}	
						secInput.sistercities=secMarket.secSearchsistercityCB.selected;
					
					
					
					if(secMarket.miles_in_num.selected)
					{
						if(secMarket.miles.text==""||StringUtil.trim(secMarket.miles.text)=='')
						{
							Alert.show("PLEASE ENTER A VALUE FOR MILES");
							return;
						}
						
						else
						{
							secInput.miles = secMarket.miles.text;
							secInput.mileagePercent = false;
						}
						
					}
						
					else if(secMarket.milesPercent.text == null || StringUtil.trim(secMarket.milesPercent.text) == '')
					{
						secInput.miles = "1.33";
						secInput.mileagePercent = true;
					}
					else 
					{
						secInput.miles = secMarket.milesPercent.text;
						secInput.mileagePercent = true;
					}
					
					
					secInput.connections=secMarket.secSearchleginfo.value;
					secInput.avoid_sta=secMarket.secSearchavoidsta.text;
					secInput.suppress_avail=secMarket.secSearchsupavl.selected;
				}
					
				else
				{	
					index= secSearchTab.selectedIndex +1;
					secInput.index=index;
					secInput.flight_num=secFlight.flt_num.text;
					secInput.flt_dep_sta=secFlight.dpt_frm.text;
					secInput.flt_arr_sta=secFlight.dpt_arr.text;
					secInput.flt_date=secFlight.flightDate.selectedDate;
					secInput.flt_airline=secFlight.flt_al_RCB.selectedValue as String;
				}
				
				dispatchEvent(new GetConnectionsDataEvent('getConnectionsEvent', secInput));
				
			}
			
			
			public function createDate(date:Date,hours:Number,minutes:Number):Date
			{   
				/*var militaryHours:int= hours;
				if(time_of_day == 2 && hours!=12)
				militaryHours= hours+12;
				else if (time_of_day == 1 && hours == 12)
				militaryHours =0;*/
				
				return (new Date(date.getFullYear(),
					date.getMonth(),
					date.getDate(),
					hours,minutes));

			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup>
		
		<s:Label text="Search Criteria:" fontSize="20" fontWeight="bold" color="#FFFFFF"/>
		<s:Spacer/>
		<s:BorderContainer id="bc1"  
						   borderWeight="2" borderStyle="solid" includeInLayout="true"
						   width="100%" horizontalCenter="0">
			<mx:TabNavigator id="secSearchTab" creationPolicy="all">
				<view:SecondaryMarketSearchBox id="secMarket"/>
				<view:Flight id="secFlight"/>
			</mx:TabNavigator>
		</s:BorderContainer>
		<s:Spacer height="10"/>
		<s:HGroup>
			<!--<s:TextInput id="secMessage"/>-->
			<s:Button id="SearchAgain" label="Search Again" fontWeight="bold" click="SearchAgain_clickHandler(event)" />
		</s:HGroup>
	</s:VGroup>	
</s:SkinnableContainer>
