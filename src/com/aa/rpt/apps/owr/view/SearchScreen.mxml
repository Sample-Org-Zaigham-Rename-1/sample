<?xml version="1.0" encoding="utf-8"?>
<!-- SearchScreen.mxml -->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   title="Search Criteria:"
			   skinClass="skin.TitleWindowSkin"
			   styleName="TitleWindow"
			   xmlns:view="com.aa.rpt.apps.owr.view.*">
	
	<fx:Style>
		.TitleWindow 
			{
			borderColor: #000000;
			backgroundColor: #FFFFFF;
			color: #00009C;
			paddingBottom: 0;
			paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 0;
			}
	</fx:Style>
	
	<fx:Metadata>
		[Event(name="getConnectionsEvent", type="com.aa.rpt.apps.owr.events.GetConnectionsDataEvent")]
	</fx:Metadata>

	<s:layout>
		<s:VerticalLayout paddingTop="0" paddingBottom="0"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.aa.rpt.apps.owr.events.GetConnectionsDataEvent;
			import com.aa.rpt.apps.owr.vo.SearchScreenVO;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.utils.StringUtil;
			
			private var curParms:SearchScreenVO;
			private var mktParms:SearchScreenVO;
			private var fltParms:SearchScreenVO;
			
			private var mktParmsPopulated:Boolean = false;
			private var fltParmsPopulated:Boolean = false;
			
			//////////////////////////////////////////////
			private function populateControl():void
			{
				if(tab_nav.selectedIndex == 0)
					{
					if(mktParmsPopulated)
						return;
					
					mktParmsPopulated = true;
					
					if(mktParms == null)
						{
						market.setDepatureEndDate();
						return;
						}
					
					market.dep_sta.text = mktParms.depSta;
					market.arr_sta.text = mktParms.arvSta;
					market.sistercitiescb.selected = mktParms.useSisterCities;
					market.dep_strt_time.date.selectedDate = mktParms.depDateMin;
					market.dep_strt_time.hours.value = mktParms.depDateMin.hours
					market.dep_strt_time.minutes.value = mktParms.depDateMin.minutes;
					market.dep_end_time.date.selectedDate = mktParms.depDateMax;
					market.dep_end_time.hours.value = mktParms.depDateMax.hours
					market.dep_end_time.minutes.value = mktParms.depDateMax.minutes;
					market.domconnect.text = mktParms.domConxTime;
					market.intconnect.text = mktParms.intConxTime;
					
					if(mktParms.isMileageInPercent)
						{
						market.miles.visible = false;
						market.miles.includeInLayout = false;
						market.milesPercent.visible = true;
						market.milesPercent.includeInLayout = true;
						market.miles_in_percent.selected = true;
						market.milesPercent.text = mktParms.maxMileage;
						}
					else {
						market.miles.visible = true;
						market.miles.includeInLayout = true;
						market.milesPercent.visible = false;
						market.milesPercent.includeInLayout = false;
						market.miles_in_num.selected = true;
						market.miles.text = mktParms.maxMileage;
						}
					
					market.avoid_sta.text = mktParms.avoidStations;
					
					market.AACB.selected = (mktParms.validAirlines == null || mktParms.validAirlines.indexOf("AA") < 0 ? false : true);
					market.BACB.selected = (mktParms.validAirlines == null || mktParms.validAirlines.indexOf("BA") < 0 ? false : true);
					market.IBCB.selected = (mktParms.validAirlines == null || mktParms.validAirlines.indexOf("IB") < 0 ? false : true);
					market.JLCB.selected = (mktParms.validAirlines == null || mktParms.validAirlines.indexOf("JL") < 0 ? false : true);
					market.AYCB.selected = (mktParms.validAirlines == null || mktParms.validAirlines.indexOf("AY") < 0 ? false : true);
					market.USCB.selected = (mktParms.validAirlines == null || mktParms.validAirlines.indexOf("US") < 0 ? false : true);
					
					market.leginfo.value = mktParms.numConx;
					market.sup_av_mkt.selected = mktParms.suppressAvail;
					}
				else {
					if(fltParmsPopulated)
						return;
					
					fltParmsPopulated = true;
					
					if(fltParms == null)
						{
						flight.flt_al_RCB.selectedValue = "AA";
						return;
						}

					flight.flt_num.text = fltParms.fltNum;
					flight.dpt_frm.text = fltParms.fltDepSta;
					flight.dpt_arr.text = fltParms.fltArvSta;
					flight.flightDate.selectedDate = fltParms.fltDate;
					flight.flt_al_RCB.selectedValue = fltParms.fltAirline;
					flight.sup_av_flt.selected = fltParms.suppressAvail;	
					}
			}
				
			//////////////////////////////////////////////
			public function populateControls(curParms:SearchScreenVO, mktParms:SearchScreenVO, fltParms:SearchScreenVO):void
			{
				this.curParms = curParms;
				this.mktParms = mktParms;
				this.fltParms = fltParms;
				
				if(curParms == null || curParms.searchType == 0)
					 populateControl();
				else tab_nav.selectedIndex = curParms.searchType;
			}

			//////////////////////////////////////////////
			private function searchButton(event:Event, closeWindow:Boolean = false):void
			{
				if(closeWindow)
					{
					dispatchEvent(new GetConnectionsDataEvent('getConnectionsEvent', null));
					return;
					}
				
				var ssParms:SearchScreenVO = new SearchScreenVO();

				ssParms.searchType = tab_nav.selectedIndex;
				
				if(tab_nav.selectedIndex == 0)
					{
					var startdt:Date=createDate(market.dep_strt_time.date.selectedDate,market.dep_strt_time.hours.value,market.dep_strt_time.minutes.value);
					var enddt:Date;
					var tempdate:Date;

					if(market.dep_end_time.enabled)
						{
						enddt= createDate(market.dep_end_time.date.selectedDate,market.dep_end_time.hours.value,market.dep_end_time.minutes.value);
						}
						
					if(market.nextday.selected)
						{
						tempdate=market.dep_strt_time.date.selectedDate;
						tempdate=new Date(market.dep_strt_time.date.selectedDate.fullYear,market.dep_strt_time.date.selectedDate.month,market.dep_strt_time.date.selectedDate.date+1,0,0)
						enddt=createDate(tempdate,23,59);
						}
						
					if(market.twodays.selected)
						{
						tempdate=market.dep_strt_time.date.selectedDate;
						tempdate=new Date(market.dep_strt_time.date.selectedDate.fullYear,market.dep_strt_time.date.selectedDate.month,market.dep_strt_time.date.selectedDate.date+2,0,0)
						enddt=createDate(tempdate,23,59);
						}
						
					if(enddt <= startdt)
						{
						Message.text="Invalid Departure Window Date/Time";
						return;
						}
						
					ssParms.depDateMin = startdt;
					ssParms.depDateMax = enddt;
						
					var marketCarrierClause:String = "";
					if(market.AACB.selected)
						marketCarrierClause += market.AACB.label + ',';
					if(market.BACB.selected)
						marketCarrierClause += market.BACB.label + ',';
					if(market.IBCB.selected)
						marketCarrierClause += market.IBCB.label + ',';
					if(market.JLCB.selected)
						marketCarrierClause += market.JLCB.label + ',';
					if(market.AYCB.selected)
						marketCarrierClause += market.AYCB.label + ',';
					if(market.USCB.selected)
						marketCarrierClause += market.USCB.label + ',';
						
					marketCarrierClause = marketCarrierClause.substr(0, marketCarrierClause.length-1);
						
					ssParms.validAirlines= marketCarrierClause;
						
					if(market.arr_sta.text==''||StringUtil.trim(market.arr_sta.text)==''
							||market.dep_sta.text==''||StringUtil.trim(market.dep_sta.text)=='')
						{
						Message.text="Please Enter a Valid Market";
						return;
						}

					ssParms.arvSta= market.arr_sta.text;
					ssParms.depSta= market.dep_sta.text;

					if(StringUtil.trim(market.domconnect.text) == '')
						{
						Message.text = "Please Enter Max Hours To Connect";
						return;
						}
						
					if(StringUtil.trim(market.intconnect.text) == '')
						market.intconnect.text = market.domconnect.text;

					ssParms.domConxTime = market.domconnect.text;
					ssParms.intConxTime = market.intconnect.text;
					ssParms.useSisterCities = market.sistercitiescb.selected;
						
					if(market.miles_in_num.selected)
						{
						if(market.miles.text==""||StringUtil.trim(market.miles.text)=='')
							{
							Message.text="Please Enter a Value For Miles";
							return;
							}
						else{
							ssParms.maxMileage = market.miles.text;
							ssParms.isMileageInPercent = false;
							}
						}
					else if(market.milesPercent.text == null || StringUtil.trim(market.milesPercent.text) == '')
						{
						ssParms.maxMileage = "1.33";
						ssParms.isMileageInPercent = true;
						}
					else{
						ssParms.maxMileage = market.milesPercent.text;
						ssParms.isMileageInPercent = true;
						}
						
					ssParms.numConx = market.leginfo.value;
					ssParms.avoidStations = market.avoid_sta.text;
					ssParms.suppressAvail = market.sup_av_mkt.selected;
					}
				else{
					ssParms.fltNum = flight.flt_num.text;
					ssParms.fltDepSta = flight.dpt_frm.text;
					ssParms.fltArvSta = flight.dpt_arr.text;
					ssParms.fltDate = flight.flightDate.selectedDate;
					ssParms.fltAirline = flight.flt_al_RCB.selectedValue as String;
					ssParms.suppressAvail = flight.sup_av_flt.selected;
					}

				dispatchEvent(new GetConnectionsDataEvent('getConnectionsEvent', ssParms));
			}
			
			//////////////////////////////////////////////
			public function createDate(date:Date,hours:Number,minutes:Number):Date
			{   
				return(new Date(date.getFullYear(), date.getMonth(), date.getDate(), hours,minutes));
			}
		]]>
	</fx:Script>
	
	<mx:TabNavigator paddingLeft="0" id="tab_nav" width="450" change="{populateControl()}" includeInLayout="true">
		<view:Market id="market" label="Search By Market"/>
		<view:Flight id="flight" label="Search By Flight"/>
	</mx:TabNavigator>
	
	<s:HGroup includeInLayout="true" width="100%"  verticalAlign="middle">
		<s:Spacer width="5"/>
		<s:Button label="Search" click="{Message.text=''; searchButton(event)}"/>
		<s:Spacer width="5"/>
		<s:Label id="Message" color="red"/>
		<s:HGroup  width="100%" horizontalAlign="right">
			<s:Button label="Close"  click="{Message.text=''; searchButton(event, true)}"/>
			<s:Spacer width="5"/>
		</s:HGroup>
	</s:HGroup>
	
	<s:Spacer height="2"/>
</s:TitleWindow>
